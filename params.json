{"name":"Dgelong","tagline":"A JavaScript Implementation of Useful First-class Citizens","body":"***It's not ready for production. Stay tuned.***\r\n\r\nSet of useful first-class structures which allow you to get rid of your developer's pain.\r\n\r\n * **Flatten** by default.\r\n * **Minimal API sufrace area**.\r\n * **Immutable**.\r\n * **Lazy evaluation**.\r\n * **Full interoperability** between all structures and JavaScript natives.\r\n\r\n## Install\r\n\r\n\tnpm install dgelong --save\r\n\r\n## Usage\r\n\r\n*Note: [Babel](https://babeljs.io/) is used for transpiling Dgelong's sources.*\r\n\r\n### ECMAScript 5\r\n\r\n*Dgelong author highly recommends you to start using ECMAScript 6 in your project.*\r\n\r\nYou can start easily with project [Babel](https://babeljs.io/).\r\n\r\nIf you don't want to use Babel or **ECMAScript 6** I recommend you to require main file only:\r\n\r\n\tvar Dgelong = require('dgelong');\r\n\r\nSo then you'll be able to use Dgelong's structures:\r\n\r\n\tvar Maybe = Dgelong.Maybe,\r\n\t\tJust = Dgelong.Just,\r\n\t\t...;\r\n\r\nThis file is using AMD pattern so you're able to import it directly in browser:\r\n\r\n\t<script src=\"node_modules/dgelong/bundle.js\"></script>\r\n\r\nWhich will provide you `Dgelong` global variable.\r\n\r\n### ECMAScript 6\r\n\r\nYou're able to import particular structures:\r\n\r\n\timport Either, {Success, Failure} from 'dgelong/either';\r\n\timport Maybe from 'dgelong/maybe';\r\n\timport compose from 'dgelong/compose';\r\n\r\n## Time & Space\r\n\r\n - Time (`bind`, `subscribe`)\r\n   - Future (async task as value)\r\n   - Observable (async lists)\r\n - Space (`bind`, `lift`)\r\n   - Maybe (null-safe computations)\r\n   - Either (two-way composition)\r\n\r\n## Maybe\r\n\r\n\tfunction square(n) {\r\n\t    return n * n;\r\n\t}\r\n\r\n\tfunction isEven(n) {\r\n\t    return n % 2 ? Nothing() : Just(n);\r\n\t}\r\n\r\n\tJust(5)\r\n\t    .bind(square) // returns Just(25)\r\n\t    .bind(isEven) // returns Nothing()\r\n\t    .bind(alert); // won't work\r\n\r\n## Either\r\n\r\n\tfunction validateUserPassword(password) {\r\n\t    if (password.length < 10) return Failure('Password too short');\r\n\t    if (!/[0-9]/g.test(password)) return Failure('Password should contain numbers');\r\n\r\n\t    return Success(password);\r\n\t}\r\n\r\n\tvalidateUserPassword('boo')\r\n\t    .bind(savePassword, showError);\r\n\r\n## Future\r\n\r\n\tfunction fetch(url) {\r\n\t\treturn Future(function(resolve, reject) {\r\n\t\t\tvar xhr = new XMLHttpRequest();\r\n\r\n\t\t\txhr.onload = () => resolve(this.response);\r\n\t\t\txhr.onerror = () => reject(this);\r\n\r\n\t\t\txhr.open(url);\r\n\t\t\txhr.send(null);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdispose() { xhr.abort(); }\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tfetch('/products')\r\n\t\t.bind(products => ...)\r\n\t\t.subscribe(showProducts);\r\n\r\n## Observable\r\n\r\n\tvar clicks = Observable(function(next){\r\n\t\tdocument.addEventListener('click', next);\r\n\r\n\t\treturn {\r\n\t\t\tdispose(){ document.removeEventListener('click', next); }\r\n\t\t};\r\n\t});\r\n\r\n\tclicks\r\n\t\t.map(event => event.target)\r\n\t\t.forEach(element => ...);\r\n\r\n## License\r\n\r\n[MIT (c) Alexey Raspopov](./LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}