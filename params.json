{"name":"Dgelong","tagline":"A JavaScript Implementation of Useful First-class Citizens","body":"***It's not ready for production. Stay tuned.***\r\n\r\nSet of useful first-class structures which allow you to get rid of your developer's pain.\r\n\r\n * **Flatten** by default.\r\n * **Minimal API sufrace area**.\r\n * **Immutable**.\r\n * **Lazy evaluation**.\r\n * **Full interoperability** between all structures and JavaScript natives.\r\n\r\n## Install\r\n\r\n\tnpm install dgelong --save\r\n\r\n## Motivation\r\n\r\nI've read [Fantasy Land](https://github.com/fantasyland/fantasy-land) specification. I don't want make another implementation that requires Ph.D in Math. The usage of monads should be as simple as functional composition `f(g(a))`. API should be close to native. So if we're talking about data structures, they should be produced in the same way as natives: by calling constructor function with or without `new` operator (I prefer the second approach).\r\n\r\n## Usage\r\n\r\n_**Note:** [Babel](https://babeljs.io/) is used for transpiling Dgelong's sources. The author highly recommends you to start using ECMAScript 6 in your project._\r\n\r\nDgelong's bundle uses UMD so it can be required in all environments (CommonJS, AMD, ES6 modules, browser).\r\n\r\n### CommonJS\r\n\r\n```javascript\r\nvar Dgelong = require('dgelong');\r\n```\r\n\r\n### ECMAScript 6\r\n\r\nJust like in CommonJS Modules style you can grab everything in one object:\r\n\r\n```javascript\r\nimport Dgelong from 'dgelong';\r\n```\r\n\r\nOr just use something specific, for example:\r\n\r\n```javascript\r\nimport {Maybe, Future} from 'dgelong';\r\n```\r\n\r\nBut, along with that, you can import particular structures by using direct paths:\r\n\r\n```javascript\r\nimport Maybe, {Just, Nothing} from 'dgelong/maybe';\r\nimport Either, {Right, Left} from 'dgelong/either';\r\nimport Future, {Resolve, Reject} from 'dgelong/future';\r\nimport Observable from 'dgelong/observable';\r\n```\r\n\r\n### Browser\r\n\r\n```html\r\n<script src=\"node_modules/dgelong/bundle.js\"></script>\r\n```\r\n\r\nIt will provide you `Dgelong` global variable.\r\n\r\n## Time & Space\r\n\r\n - Time (`bind`, `subscribe`)\r\n   - Future (async task as value)\r\n   - Observable (async lists)\r\n - Space (`bind`, `pull`)\r\n   - Maybe (null-safe computations)\r\n   - Either (two-way composition)\r\n\r\n## Maybe\r\n\r\n```javascript\r\nimport {Just, Nothing} from 'dgelong/maybe';\r\n\r\nfunction square(n) {\r\n    return n * n;\r\n}\r\n\r\nfunction isEven(n) {\r\n    return n % 2 ? Nothing() : Just(n);\r\n}\r\n\r\nJust(5)\r\n    .bind(square) // returns Just(25)\r\n    .bind(isEven) // returns Nothing()\r\n    .bind(alert); // won't work\r\n```\r\n\r\n## Either\r\n\r\n```javascript\r\nimport {Right as Success, Left as Failure} from 'dgelong/either';\r\n\r\nfunction validateUserPassword(password) {\r\n    if (password.length < 10) return Failure('Password too short');\r\n    if (!/[0-9]/g.test(password)) return Failure('Password should contain numbers');\r\n\r\n    return Success(password);\r\n}\r\n\r\nvalidateUserPassword('boo')\r\n    .bind(savePassword, showError);\r\n```\r\n\r\n## Future\r\n\r\n```javascript\r\nimport Future from 'dgelong/future';\r\n\r\nfunction fetch(url) {\r\n\treturn Future(function(resolve, reject) {\r\n\t\tvar xhr = new XMLHttpRequest();\r\n\r\n\t\txhr.onload = () => resolve(this.response);\r\n\t\txhr.onerror = () => reject(this);\r\n\r\n\t\txhr.open(url);\r\n\t\txhr.send(null);\r\n\r\n\t\treturn {\r\n\t\t\tdispose() { xhr.abort(); }\r\n\t\t};\r\n\t});\r\n}\r\n\r\nfetch('/products')\r\n\t.bind(products => ...)\r\n\t.subscribe(showProducts);\r\n```\r\n\r\n## Observable\r\n\r\n```javascript\r\nimport Observable from 'dgelong/observable';\r\n\r\nvar clicks = Observable(function(next){\r\n\tdocument.addEventListener('click', next);\r\n\r\n\treturn {\r\n\t\tdispose(){ document.removeEventListener('click', next); }\r\n\t};\r\n});\r\n\r\nclicks\r\n\t.map(event => event.target)\r\n\t.forEach(element => ...);\r\n```\r\n\r\n## License\r\n\r\n[MIT (c) Alexey Raspopov](./LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}